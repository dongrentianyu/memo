[
    {
        "author": "whitefall",
        "core-version": ">=5.2.0",
        "dependents": "$:/plugins/tiddlywiki/markdown",
        "description": "从 Obsidian 笔记库导入 Markdown 文件到 TiddlyWiki",
        "list": "readme ui/Panel ui/settings",
        "name": "Obsidian Vault",
        "plugin-type": "plugin",
        "text": "{\"tiddlers\":{\"$:/config/markdown/breaks\":{\"title\":\"$:/config/markdown/breaks\",\"created\":\"20230915033254554\",\"modified\":\"20230915033254554\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"true\"},\"$:/plugins/whitefall/obsidian-vault/readme\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"! tw5-obsidian-vault\\n\\n使用方式请查看：[[参考手册|https://tiddly-gittly.github.io/tidgi-obsidian-manager/]]\\n\\nGithub Repo: https://github.com/tiddly-gittly/tidgi-obsidian-manager\"},\"$:/plugins/whitefall/obsidian-vault/router/get-obvault.js\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/router/get-obvault.js\",\"text\":\"!function(){\\\"use strict\\\";exports.method=\\\"GET\\\",exports.path=/^\\\\/obvault\\\\/(.+)$/,exports.handler=function(e,t,s){var i,a,r,n,p,o,d=require(\\\"path\\\"),l=require(\\\"fs\\\"),c=$tw.utils.decodeURIComponentSafe(s.params[0]),m=s.queryParameters,u=function(e,t){var t=t||[\\\".git\\\",\\\".obsidian\\\"],i=[];if(!l.lstatSync(e).isDirectory())return s.sendResponse(400,{\\\"Content-Type\\\":\\\"text/plain\\\"},\\\"Not folder: \\\"+e),!1;for(const r of l.readdirSync(e)){var a=d.join(e,r);l.statSync(a).isFile()?i.push(a):t.includes(r)||(a=u(a),i=i.concat(a))}return i},g=function(e,t){return e=e.replace(/\\\\\\\\/g,\\\"/\\\"),(t=t.replace(/\\\\\\\\/g,\\\"/\\\")).slice(e.length+1)},f=u(c,m.ignore);0!=f&&(i=f,a=m.regText,p={obVaultName:c.split(\\\"/\\\").pop()||\\\"-\\\",mdFiles:{},imgFiles:{},bp_peer:{}},o=a||\\\"\\\",i.forEach(e=>{r=d.basename(e),n=d.extname(r),p.bp_peer[r]?p.bp_peer[r].push(g(c,e)):p.bp_peer[r]=[g(c,e)];var t;-1!==[\\\".jpg\\\",\\\".jpeg\\\",\\\".png\\\",\\\".gif\\\",\\\".bmp\\\",\\\".svg\\\"].indexOf(n)?p.imgFiles[r]?p.imgFiles[r].push({path:g(c,e),data:l.readFileSync(e).toString(\\\"base64\\\")}):p.imgFiles[r]=[{path:g(c,e),data:l.readFileSync(e).toString(\\\"base64\\\")}]:\\\".md\\\"===n&&(n=l.readFileSync(e,\\\"utf8\\\"),t=l.statSync(e),RegExp(o).test(n))&&(p.mdFiles[r]?p.mdFiles[r].push({path:g(c,e),data:n,created:$tw.utils.stringifyDate(t.birthtime),modified:$tw.utils.stringifyDate(t.mtime)}):p.mdFiles[r]=[{path:g(c,e),data:n,created:$tw.utils.stringifyDate(t.birthtime),modified:$tw.utils.stringifyDate(t.mtime)}])}),f=p,m=JSON.stringify(f),s.sendResponse(200,{\\\"Content-Type\\\":\\\"application/json\\\"},m))}}();\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/whitefall/obsidian-vault/stylesheet/obsidian-main-style\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/stylesheet/obsidian-main-style\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\",\"text\":\".obvault-control-panel td{padding:4px}.obvault-control-panel table,.obvault-control-panel table input,.obvault-control-panel table textarea{width:100%}\"},\"$:/plugins/whitefall/obsidian-vault/ui/Panel\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/Panel\",\"type\":\"text/vnd.tiddlywiki\",\"tags\":\"$:/tags/ControlPanel/SettingsTab\",\"caption\":\"obvault-Panel\",\"text\":\"\\n<$obvault/>\\n<div class=\\\"obvault-control-panel\\\">\\n<table>\\n    <tr>\\n        <th>Vault 文件夹路径</th>\\n    </tr>\\n    <tr>\\n        <td><$edit-text tiddler=\\\"$:/temp/obsidian-vault/input-box-path\\\" size=\\\"48\\\" type=\\\"text\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder=\\\"请输入路径\\\" focus={{$:/plugins/whitefall/obsidian-vault/config/AutoFocus}} /></td>\\n    </tr>\\n</table>\\n\\n<table>\\n  <tr>\\n    <th>选中文件</th>\\n    <th>排除文件夹</th>\\n  </tr>\\n  <tr>\\n    <td><$edit-text tiddler=\\\"$:/temp/obsidian-vault/input-box-reg\\\" type=\\\"text\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder=\\\"请输入表达式\\\" focus={{$:/plugins/whitefall/obsidian-vault/config/AutoFocus}} /></td>\\n    <td><$edit-text tiddler=\\\"$:/temp/obsidian-vault/input-box-ignore\\\" type=\\\"text\\\" tag=\\\"input\\\" default=\\\"\\\" placeholder=\\\"请输入表达式\\\" focus={{$:/plugins/whitefall/obsidian-vault/config/AutoFocus}} /></td>\\n  </tr>\\n</table>\\n</div>\\n\\n\\n<$set name='path' tiddler='$:/temp/obsidian-vault/input-box-path'>\\n<$set name='reg' tiddler='$:/temp/obsidian-vault/input-box-reg'>\\n<$set name='ignore' tiddler='$:/temp/obsidian-vault/input-box-ignore'>\\n  <$button><$action-sendmessage $message=\\\"tw-obsidian-add\\\" path=<<path>> reg=<<reg>> ignore=<<ignore>> />add</$button>\\n  <$button><$action-sendmessage $message=\\\"tw-obsidian-purge\\\" />purge</$button>\\n</$set>\\n</$set>\\n</$set>\"},\"$:/plugins/whitefall/obsidian-vault/ui/displayCaption\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/displayCaption\",\"text\":\"\\\\whitespace trim\\n<h2 class=\\\"tc-title\\\">\\n{{!!caption}}\\n</h2>\"},\"$:/plugins/whitefall/obsidian-vault/ui/displayCaptionFilter\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/displayCaptionFilter\",\"tags\":\"$:/tags/ViewTemplateTitleFilter\",\"list-before\":\"$:/config/ViewTemplateTitleFilters/default\",\"text\":\"[<currentTiddler>has[obvault]has[caption]then[$:/plugins/whitefall/obsidian-vault/ui/displayCaption]]\"},\"$:/plugins/whitefall/obsidian-vault/ui/settings\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/settings\",\"tags\":\"$:/tags/ControlPanel/SettingsTab\",\"caption\":\"obvault settings\",\"text\":\"<$checkbox tiddler=\\\"$:/config/markdown/breaks\\\" field=\\\"text\\\" checked=\\\"true\\\" unchecked=\\\"false\\\" default=\\\"true\\\"> [[Breaks|$:/config/markdown/breaks]], 适配obsidian风格硬换行格式, 需要刷新页面后生效。</$checkbox> \\n\"},\"$:/plugins/whitefall/obsidian-vault/ui/vaulttrees\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/vaulttrees\",\"tags\":\"$:/tags/SideBar\",\"caption\":\"VaultTrees\",\"text\":\"\\n<div class=\\\"tc-tree-obv\\\">\\n<span><center><p>Obsidian Vault<sup><$link to=\\\"$:/plugins/whitefall/obsidian-vault/ui/Panel\\\">p</$link></sup>&nbsp;文件列表</p></center></span>\\n<<tree prefix:\\\"λ:/\\\">>\\n</div>\\n\\n<!-- \\n[get[obvault]unique[]]\\n[field:obvault[Neural-Networks]get[vaulttree]]\\n条目名必须和字段路径中的名字一致。\\n-->\\n\"},\"$:/plugins/whitefall/obsidian-vault/obvault-main.js\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/obvault-main.js\",\"type\":\"application/javascript\",\"module-type\":\"widget\",\"Modern.TiddlyDev#Origin\":\"obvault-main.ts\",\"text\":\"\\\"use strict\\\";var import_widget=require(\\\"$:/core/modules/widgets/widget.js\\\");function tm_notify(t,e){$tw.wiki.addTiddler({title:\\\"$:/state/notification/\\\"+t,text:t+\\\": \\\"+e}),$tw.notifier.display(\\\"$:/state/notification/\\\"+t)}async function fetchData(t,e,i){var a,r=[\\\".git\\\",\\\".obsidian\\\",\\\".stfolder\\\",\\\".stversions\\\"],r=(\\\"\\\"===i&&(a=JSON.stringify(r)),\\\"\\\"===i&&\\\"+\\\"!==i.at(0)||(n=i.substring(1).replace(/[ ]/g,\\\"\\\").split(\\\",\\\"),a=JSON.stringify(r.concat(n))),\\\"\\\"!==i&&\\\"+\\\"!==i.at(0)&&(n=i.replace(/[ ]/g,\\\"\\\").split(\\\",\\\"),a=JSON.stringify(n)),$tw.wiki.getTiddlerText(\\\"$:/info/url/full\\\")),n=r+\\\"obvault/\\\"+t+`?regText=${e}&ignore=`+a,r=(console.log(\\\"获取数据:\\\"+n),tm_notify(\\\"获取数据 (fetchData)  \\\",`\\\"${n}\\\"`),await fetch(n));return 400==r.status?(tm_notify(\\\"获取数据 (fetchData)  \\\",\\\"Not Folder\\\"),!1):(a=await r.json(),console.log(\\\"获取完成, 正在写入到wiki中。\\\"),tm_notify(\\\"获取数据 (fetchData)  \\\",\\\"获取完成, 正在写入到wiki中\\\"),a)}function isUrl(t){return new RegExp(\\\"^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\\\\\\\S+(?::\\\\\\\\S*)?@)?(?:(?:(?:[1-9]\\\\\\\\d?|1\\\\\\\\d\\\\\\\\d|2[01]\\\\\\\\d|22[0-3])(?:\\\\\\\\.(?:1?\\\\\\\\d{1,2}|2[0-4]\\\\\\\\d|25[0-5])){2}(?:\\\\\\\\.(?:[0-9]\\\\\\\\d?|1\\\\\\\\d\\\\\\\\d|2[0-4]\\\\\\\\d|25[0-4]))|(?:(?:[a-z\\\\\\\\u00a1-\\\\\\\\uffff0-9]+-?)*[a-z\\\\\\\\u00a1-\\\\\\\\uffff0-9]+)(?:\\\\\\\\.(?:[a-z\\\\\\\\u00a1-\\\\\\\\uffff0-9]+-?)*[a-z\\\\\\\\u00a1-\\\\\\\\uffff0-9]+)*(?:\\\\\\\\.(?:[a-z\\\\\\\\u00a1-\\\\\\\\uffff]{2,})))|localhost)(?::\\\\\\\\d{2,5})?(?:(/|\\\\\\\\?|#)[^\\\\\\\\s]*)?$\\\",\\\"i\\\").test(t)}function unique_or_root_link(t,e){var i=t+\\\".md\\\";if(i in e){var a=e[i];if(1===a.length){i=a[0].replace(/.md$/,\\\"\\\");if(i)return i}if(1<a.length)for(const n in a){var r=a[n].replace(/.md$/,\\\"\\\");if(!r.includes(\\\"/\\\"))return r}}return\\\"\\\"}function links_wiki_syntax(t,e,i){var a={pattern:new RegExp(\\\"(?<!!)\\\\\\\\[\\\\\\\\[(.*?)\\\\\\\\]\\\\\\\\]\\\",\\\"g\\\"),target:\\\"[[$1]]\\\"},r=(new RegExp(\\\"(?<!!)\\\\\\\\[(.*?)\\\\\\\\]\\\\\\\\((.*?)\\\\\\\\)\\\",\\\"g\\\"),[...t.matchAll(a.pattern)]);for(const s in r){var n=r[s][1],l=r[s][0],n=n.split(\\\"|\\\"),o=n[0];if(1===n.length){if(isUrl(o))break;!isUrl(o)&&o.includes(\\\"/\\\")&&(t=t.replace(l,\\\"[[\\\"+n[0].split(\\\"/\\\").slice(-1)+\\\"|λ:/\\\"+i+\\\"/\\\"+n[0]+\\\"]]\\\"));var d=unique_or_root_link(o,e);\\\"\\\"!==d&&(t=t.replace(l,\\\"[[\\\"+n[0]+\\\"|λ:/\\\"+i+\\\"/\\\"+d+\\\"]]\\\"))}1<n.length&&(isUrl(o)&&(t=t.replace(l,\\\"[[\\\"+n[1]+\\\"|\\\"+n[0]+\\\"]]\\\")),!isUrl(o)&&o.includes(\\\"/\\\")&&(t=t.replace(l,\\\"[[\\\"+n[1]+\\\"|λ:/\\\"+i+\\\"/\\\"+n[0]+\\\"]]\\\")),\\\"\\\"!==(d=unique_or_root_link(o,e)))&&(t=t.replace(l,\\\"[[\\\"+n[1]+\\\"|λ:/\\\"+i+\\\"/\\\"+d+\\\"]]\\\"))}return t}function embeds_wiki_syntax(t,r,n){return t=(t=t.replace(/\\\\!\\\\[\\\\[(.*?)\\\\]\\\\]/g,(t,e)=>{var i=e.split(\\\"|\\\"),a=i[0].split(\\\".\\\").slice(-1)[0].trim();if(-1===[\\\"jpg\\\",\\\"jpeg\\\",\\\"png\\\",\\\"gif\\\",\\\"bmp\\\",\\\"svg\\\"].indexOf(a)){if(1===i.length){a=unique_or_root_link(i[0],r);if(\\\"\\\"!==a)return\\\"{{λ:/\\\"+n+\\\"/\\\"+a+\\\"}}\\\"}return\\\"{{\\\"+e+\\\"}}\\\"}if(1===i.length)return\\\"[img [\\\"+i[0].trim()+\\\"]]\\\";if(1<i.length){a=+i.slice(-1)[0];if(\\\"number\\\"==typeof a)return\\\"[img width=\\\"+a+\\\" [\\\"+i[0].trim()+\\\"]]\\\"}})).replace(/\\\\!\\\\[(.*?)\\\\]\\\\((.*?)\\\\)/g,(t,e,i)=>{var a=e.split(\\\"|\\\"),r=i,n=r.split(\\\".\\\").slice(-1)[0].trim();if(-1===[\\\"jpg\\\",\\\"jpeg\\\",\\\"png\\\",\\\"gif\\\",\\\"bmp\\\",\\\"svg\\\",\\\"ico\\\"].indexOf(n))return t;if(0===a.length||\\\"\\\"===a[0].trim())return\\\"[img [\\\"+r+\\\"]]\\\";if(1===a.length)return\\\"[img [\\\"+a[0].trim()+\\\"|\\\"+r+\\\"]]\\\";if(1<a.length){n=+a.slice(-1)[0].split(\\\"x\\\")[0];if(\\\"number\\\"==typeof n)return\\\"[img width=\\\"+n+\\\" [\\\"+a[0].trim()+\\\"|\\\"+r+\\\"]]\\\"}})}function bold_wiki_syntax(t){return t=t.replace(/\\\\x20*\\\\*\\\\*(.*?)\\\\*\\\\*\\\\x20*/g,\\\" **$1** \\\")}async function convert(t,e,i){return t=void 0!==t&&0!==t.length?bold_wiki_syntax(t=links_wiki_syntax(t=embeds_wiki_syntax(t,e,i),e,i)):t}async function addVault(t){console.log(\\\"vaultName: \\\"+t.obVaultName);var e=$tw.wiki.getTiddlerText(\\\"$:/status/UserName\\\");for(const p in t.mdFiles){var i=t.mdFiles[p];if(0!=i.length&&1==i.length){var a=await convert(i[0].data,t.bp_peer,t.obVaultName),r=\\\"λ:/\\\"+t.obVaultName+\\\"/\\\"+i[0].path.split(\\\".\\\")[0];$tw.wiki.addTiddler(new $tw.Tiddler({title:r,type:\\\"text/markdown\\\",caption:p.split(\\\".\\\")[0],created:i[0].created,modified:i[0].modified,modifier:e,text:a,obvault:t.obVaultName})),console.log(\\\"创建条目：\\\"+r)}else if(1<i.length)for(const m in i){var n=i[m],l=await convert(n.data,t.bp_peer,t.obVaultName),o=\\\"λ:/\\\"+t.obVaultName+\\\"/\\\"+n.path.split(\\\".\\\")[0];$tw.wiki.addTiddler(new $tw.Tiddler({title:o,type:\\\"text/markdown\\\",caption:n.path.split(\\\".\\\")[0].split(\\\"/\\\").slice(-1),created:n.created,modified:n.modified,modifier:e,text:l,obvault:t.obVaultName})),console.log(\\\"创建同名异径条目：\\\"+o)}}for(const w in t.imgFiles){var d=t.imgFiles[w];if(0!=d.length&&1==d.length){var s=w,u=\\\"image/\\\"+s.substring(s.lastIndexOf(\\\".\\\")+1);$tw.wiki.addTiddler(new $tw.Tiddler({title:s,type:u,text:d[0].data,obvault:t.obVaultName})),console.log(\\\"创建图片条目：\\\"+s)}else if(1<d.length)for(const h in d){var f=d[h],c=f.path,g=\\\"image/\\\"+c.substring(c.lastIndexOf(\\\".\\\")+1);$tw.wiki.addTiddler(new $tw.Tiddler({title:c,type:g,text:f.data,obvault:t.obVaultName})),console.log(\\\"创建图片条目：\\\"+c)}}console.log(\\\"addVault: 所有添加工作已完成。\\\"),tm_notify(\\\"addVault\\\",\\\"所有添加工作已完成，请等待【文件系统同步服务】完成任务。\\\")}async function purgeVault(t){var e=$tw.wiki.filterTiddlers(\\\"[has:field[obvault]]\\\");0!==e.length?(e.forEach(t=>{console.log(\\\"删除条目：\\\"+t),$tw.wiki.deleteTiddler(t)}),tm_notify(\\\"purgeVault\\\",\\\"已经完全清空，请等待【文件系统同步服务】完成任务。\\\")):tm_notify(\\\"purgeVault\\\",\\\"未曾添加Obsidian仓库，写入记录为空。\\\")}var ObvaultServer=class{constructor(){$tw.rootWidget.addEventListener(\\\"tw-obsidian-add\\\",async t=>{var e;this.isValidPath(t.paramObject.path)&&0!=(e=await fetchData(t.paramObject.path,t.paramObject.reg,t.paramObject.ignore))&&addVault(e)}),$tw.rootWidget.addEventListener(\\\"tw-obsidian-purge\\\",async t=>{purgeVault()}),$tw.rootWidget.addEventListener(\\\"tw-obsidian-update\\\",async t=>{})}isValidPath(t){return\\\"\\\"===t?(console.log(\\\"路径为空！\\\"),tm_notify(\\\"addVault\\\",\\\"路径为空！\\\"),!1):!!/^(\\\\/|\\\\.\\\\.?\\\\/|([A-Za-z]:)?[\\\\\\\\|\\\\/])[^\\\\\\\\|\\\\/]+([\\\\\\\\|\\\\/][^\\\\\\\\|\\\\/]+)*[\\\\\\\\|\\\\/]?$/.test(t)||(console.log(\\\"无效路径！\\\"),tm_notify(\\\"addVault\\\",\\\"无效路径！\\\"),!1)}},ObVaultWidget=class extends import_widget.widget{refresh(t){this.computeAttributes();return!1}async render(t,e){this.parentDomNode=t,this.execute();new ObvaultServer}};exports.obvault=ObVaultWidget;\"}}}",
        "title": "$:/plugins/whitefall/obsidian-vault",
        "type": "application/json",
        "version": "0.1.0",
        "Modern.TiddlyDev#SHA256-Hashed": "7c4b52f53efcb954ce71f18b607b8a786fb96987549a93373fe0baf11a2e72af"
    }
]